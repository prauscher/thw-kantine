"""
Django settings for kantine project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import re
from contextlib import suppress
from pathlib import Path


def _read_setting(name: str, default, *, is_bool=False):
    with suppress(KeyError):
        value = os.environ[name]
        return value[0].lower() in "yt1" if is_bool else value

    with suppress(KeyError):
        return globals()[name]

    return default


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

DEBUG = _read_setting("DEBUG", False, is_bool=True)
SECRET_KEY = _read_setting("SECRET_KEY", "__default123")
ALLOWED_HOSTS = [host for host in _read_setting("ALLOWED_HOSTS", "").split(",") if host]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    'abfrage',
    'django_bootstrap5',
    'django_bootstrap_icons',
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kantine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

WSGI_APPLICATION = 'kantine.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DB_TYPE = _read_setting("DB_TYPE", "sqlite3")

_database_url = re.fullmatch(r'postgresql://(?P<user>.+):(?P<password>.+)@(?P<host>[^:/]+)'
                             r'(:(?P<port>\d+))?/(?P<name>.+)', _read_setting("DATABASE_URL", ""))
if _database_url:
    DB_TYPE = "postgresql_psycopg2"
    os.environ["DB_HOST"] = _database_url.group("host")
    os.environ["DB_PORT"] = _database_url.group("port") or ''
    os.environ["DB_USER"] = _database_url.group("user")
    os.environ["DB_PASSWORD"] = _database_url.group("password")
    os.environ["DB_NAME"] = _database_url.group("name")

DATABASES = {
    'default': {
        'ENGINE': f'django.db.backends.{DB_TYPE}',
        'HOST': _read_setting('DB_HOST', ''),
        'PORT': _read_setting('DB_PORT', ''),
        'USER': _read_setting('DB_USER', ''),
        'PASSWORD': _read_setting('DB_PASSWORD', ''),
        # use writable path as default sqlite-location
        'NAME': _read_setting('DB_NAME',
                              '/tmp/db.sqlite3'  # nosec hardcoded_tmp_directory
                              if DB_TYPE == "sqlite3" else ''),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'de-de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STORAGES = {
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    }
}

STATIC_URL = _read_setting("STATIC_URL", '/static/')
STATIC_ROOT = _read_setting("STATIC_ROOT", BASE_DIR / "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
